import { FileOutput } from './file-output';
interface SynexaOptions {
    auth: string;
    baseUrl?: string;
}
interface WaitOptions {
    type?: 'poll' | 'block';
    interval?: number;
    timeout?: number;
}
interface RunOptions {
    input: Record<string, any>;
    wait?: WaitOptions;
    webhook?: string;
    webhook_events_filter?: Array<'start' | 'output' | 'logs' | 'completed'>;
    signal?: AbortSignal;
    progress?: (prediction: PredictionResponse) => void;
}
interface PredictionInput {
    model: string;
    input: Record<string, any>;
    webhook?: string;
    webhook_events_filter?: Array<'start' | 'output' | 'logs' | 'completed'>;
}
interface PredictionResponse {
    id: string;
    model: string;
    version: string | null;
    input: Record<string, any>;
    logs: string | null;
    output: string[] | null;
    error: string | null;
    status: string;
    created_at: string;
    started_at: string | null;
    completed_at: string | null;
    metrics: {
        predict_time?: number;
        [key: string]: any;
    } | null;
}
export default class Synexa {
    private client;
    private apiKey;
    constructor(options: SynexaOptions);
    createPrediction(input: PredictionInput): Promise<PredictionResponse>;
    getPrediction(id: string): Promise<PredictionResponse>;
    private waitWithPolling;
    private waitWithBlock;
    wait(prediction: PredictionResponse, options?: WaitOptions, signal?: AbortSignal, progress?: (prediction: PredictionResponse) => void): Promise<PredictionResponse>;
    run(identifier: string, options: RunOptions): Promise<Array<string | FileOutput>>;
}
export {};
